1. Polymorphism with toString() method
Question: Iterate through the list and print out the information of the media by using toString() method. Observe what happens and explain in detail.
After running the program, the output when print Book, CompactDisc, DigitalVideoDisc are different.
In the definition of the 3 class, I defined 3 different toString method to illustrate the difference.
Each class (Book, CompactDisc, DigitalVideoDisc) has its own implementation of the toString method. This behavior is achieved through dynamic binding, which is a feature of object-oriented programming languages that allows the appropriate method implementation to be determined at runtime based on the actual type of the object being referred to.
Dynamic binding ensures that when the toString method is invoked on an object of a particular class, the appropriate implementation of the method associated with that class is executed. This allows each class to define its own specific behavior for representing its objects as strings.
This enables polymorphic behavior, where different objects of related classes can respond differently to the same method call (toString in this case) based on their specific implementations.

2. Sort media in the cart
What class should implement the Comparable interface?
The class that represents the objects to be sorted should implement the Comparable interface. In this case, it would be the class representing the items (e.g., Book, CompactDisc, DigitalVideoDisc).

In those classes, how should you implement the compareTo()method be to reflect the ordering that we want?
In the classes that implement the Comparable interface, we have to implement the compareTo() method to define the ordering based on the desired criteria. The method should return a negative integer, zero, or a positive integer based on whether the current object is less than, equal to, or greater than the object being compared to, respectively.

Can we have two ordering rules of the item (by title then cost and by cost then title) if we use this Comparable interface approach?
With the Comparable interface approach, we can only define one ordering rule for the item.
If you need to have multiple ordering rules, such as sorting by title then cost and by cost then title, we would need to implement a separate custom Comparator class for each ordering rule.

Suppose the DVDs has a different ordering rule from the other media types, that is by title, then decreasing length, then cost. How would you modify your code to allow this?
See in "package hust.soict.globalict.aims.media.comparable.DigitalVideoDisc"